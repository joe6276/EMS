@* @model IEnumerable<UserResponseDTO>

<div class="container">
    <div class="row">
        <div class="col-md-3">
            <div class="user-list">
                <h4>Users</h4>
                <ul class="list-group">
                    @foreach (var user in Model)
                    {
                        <li class="list-group-item user-item" data-user-id="@user.Id">
                            @user.Name
                        </li>
                    }
                </ul>
            </div>
        </div>
        <div class="col-md-9">
            <div class="chat-window">
                <div id="messagesList" class="messages-list"></div>
                <div class="input-group">
                    <input type="text" id="messageInput" class="form-control" placeholder="Type your message...">
                    <button class="btn btn-primary" id="sendButton">Send</button>
                </div>
            </div>
        </div>
    </div>
</div>

                @section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script>
        let connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .withAutomaticReconnect()
            .build();

        let selectedUserId = null;

        connection.start().catch(err => console.error(err));

        connection.on("ReceiveMessage", function (message) {
            if (message.senderId === selectedUserId) {
                appendMessage(message);
                connection.invoke("MarkAsRead", message.messageId);
            } else {
                // Show notification
                if (Notification.permission === "granted") {
                    new Notification("New Message", {
                        body: "You have a new message"
                    });
                }
            }
        });

        function appendMessage(message) {
            const messagesList = document.getElementById("messagesList");
            const messageDiv = document.createElement("div");
            messageDiv.classList.add("message");
            messageDiv.classList.add(message.senderId === selectedUserId ? "received" : "sent");
            messageDiv.innerHTML = `
                <div class="message-content">${message.content}</div>
                <div class="message-time">${new Date(message.timestamp).toLocaleTimeString()}</div>
            `;
            messagesList.appendChild(messageDiv);
            messagesList.scrollTop = messagesList.scrollHeight;
        }

        document.querySelectorAll(".user-item").forEach(item => {
            item.addEventListener("click", function() {
                selectedUserId = this.dataset.userId;
                document.querySelectorAll(".user-item").forEach(i => i.classList.remove("active"));
                this.classList.add("active");
                loadConversation(selectedUserId);
            });
        });

        document.getElementById("sendButton").addEventListener("click", function() {
            console.log("Hello there")
            const content = document.getElementById("messageInput").value;
            if (content && selectedUserId) {
                connection.invoke("SendMessage", selectedUserId, content);
                document.getElementById("messageInput").value = "";
            }
        });

        function loadConversation(userId) {
            fetch(`/Chat/GetConversation/${userId}`)
                .then(response => response.json())
                .then(messages => {
                    const messagesList = document.getElementById("messagesList");
                    messagesList.innerHTML = "";
                    messages.forEach(appendMessage);
                });
        }

        // Request notification permission
        if (Notification.permission !== "granted") {
            Notification.requestPermission();
        }
    </script>

    <style>
        .user-list {
            border-right: 1px solid #dee2e6;
            height: calc(100vh - 150px);
            overflow-y: auto;
        }

        .chat-window {
            height: calc(100vh - 150px);
            display: flex;
            flex-direction: column;
        }

        .messages-list {
            flex-grow: 1;
            overflow-y: auto;
            padding: 15px;
            background: #f8f9fa;
        }

        .message {
            margin-bottom: 10px;
            max-width: 70%;
            padding: 10px;
            border-radius: 10px;
        }

        .sent {
            background-color: #007bff;
            color: white;
            margin-left: auto;
        }

        .received {
            background-color: #e9ecef;
            margin-right: auto;
        }

        .message-time {
            font-size: 0.8em;
            opacity: 0.8;
        }

        .user-item {
            cursor: pointer;
        }

            .user-item:hover {
                background-color: #f8f9fa;
            }

            .user-item.active {
                background-color: #007bff;
                color: white;
            }
    </style>
} 



 *@


@model IEnumerable<UserResponseDTO>

<div class="container">
    <div class="row">
        <!-- Users List -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>Users</h5>
                </div>
                <div class="card-body">
                    <ul class="list-group" id="usersList">
                        @foreach (var user in Model)
                        {
                            <li class="list-group-item user-item" data-user-id="@user.Id">
                                @user.Name
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>

        <!-- Chat Area -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5 id="selectedUserName">Select a user to start chatting</h5>
                </div>
                <div class="card-body">
                    <div id="messagesList" style="height: 400px; overflow-y: auto;">
                    </div>
                    <div class="input-group mt-3">
                        <input type="text" id="messageInput" class="form-control" placeholder="Type your message...">
                        <button class="btn btn-primary" id="sendButton" disabled>Send</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script src="~/Scripts/jquery.signalR-2.4.2.min.js"></script>
    <script src="/signalr/hubs"></script>
    <script>
        let connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .withAutomaticReconnect()  // Add automatic reconnection
            .configureLogging(signalR.LogLevel.Information)  // Add logging
            .build();

        let selectedUserId = null;

        connection.start()
            .then(() => {
                console.log("SignalR Connected successfully!");
            })
            .catch(err => {
                console.error("SignalR Connection Error: ", err);
            });

        // Log when connection is lost and restored
        connection.onreconnecting(error => {
            console.log("Reconnecting to SignalR...", error);
        });

        connection.onreconnected(connectionId => {
            console.log("Reconnected to SignalR!", connectionId);
        });

        connection.on("ReceiveMessage", function (message) {
        
            if (message.senderId === selectedUserId || message.senderId === document.querySelector('[data-user-id]').dataset.userId) {
                appendMessage(message.message, message.timestamp, false);
            } else {
                showNotification(message);
            }
        });

        function appendMessage(content, timestamp, isSent) {
           
            const messagesList = document.getElementById("messagesList");
            const messageDiv = document.createElement("div");
            messageDiv.className = `message ${isSent ? 'sent' : 'received'} mb-2`;
            messageDiv.innerHTML = `
                <div class="message-content ${isSent ? 'bg-primary text-white' : 'bg-light'}">
                    ${content}
                    <small class="text-muted d-block">${new Date(timestamp).toLocaleTimeString()}</small>
                </div>
            `;
            messagesList.appendChild(messageDiv);
            messagesList.scrollTop = messagesList.scrollHeight;  // Auto-scroll to bottom
        }

        // Load Convo
          document.querySelectorAll('.user-item').forEach(item => {
            item.addEventListener('click', async function() {
                selectedUserId = this.dataset.userId;
               
                document.getElementById("selectedUserName").textContent = this.textContent;
                document.getElementById("sendButton").disabled = false;
                
                // Load conversation history
                const response = await fetch(`/Chat/GetConversation/${selectedUserId}`);
                const messages = await response.json()
                document.getElementById("messagesList").innerHTML = '';
                messages.reverse().forEach(msg => {
                    appendMessage(msg.content, msg.timestamp, msg.senderId !== selectedUserId);
                });
            });
        });


        // Send message
        document.getElementById("sendButton").addEventListener("click", async function() {
            const input = document.getElementById("messageInput");
            const message = input.value.trim();

            if (message && selectedUserId) {
                try {
                // Debug log
                    await connection.invoke("SendMessage", selectedUserId, message);
                  
                    appendMessage(message, new Date(), true);
                    input.value = '';
                } catch (err) {
                    console.error("Error sending message:", err);  // Debug log
                }
            }
        });

        // Allow Enter key to send message
        document.getElementById("messageInput").addEventListener("keypress", function(event) {
            if (event.key === "Enter") {
                document.getElementById("sendButton").click();
            }
        });

               var chatHub = $.connection.chatHub;
               
        // Handle incoming notifications
        chatHub.client.receiveNotification = function (senderId, content) {
            // Display a notification
            alert(`New message from ${senderId}: ${content}`);
            console.log(content)

            // Optionally, update the message list or UI
            $('#messageList').append(`<li><strong>${senderId}:</strong> ${content}</li>`);
        };
    </script>
    }